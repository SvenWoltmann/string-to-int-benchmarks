# JMH version: 1.21
# VM version: JDK 12, Java HotSpot(TM) 64-Bit Server VM, 12+33
# VM invoker: C:\Program Files\Java\jdk-12\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: eu.happycoders.string2int.StringToIntMultiBenchmark.integerParsePositiveInt

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 22913757,307 ops/s
# Warmup Iteration   2: 23232102,501 ops/s
# Warmup Iteration   3: 23807490,831 ops/s
# Warmup Iteration   4: 23847736,290 ops/s
# Warmup Iteration   5: 23716622,106 ops/s
Iteration   1: 23726184,572 ops/s
Iteration   2: 23865525,921 ops/s
Iteration   3: 23657139,130 ops/s
Iteration   4: 23708954,203 ops/s
Iteration   5: 23799578,757 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 23136806,125 ops/s
# Warmup Iteration   2: 23294256,780 ops/s
# Warmup Iteration   3: 23168926,980 ops/s
# Warmup Iteration   4: 23585266,883 ops/s
# Warmup Iteration   5: 23672301,808 ops/s
Iteration   1: 23532456,057 ops/s
Iteration   2: 23760562,310 ops/s
Iteration   3: 23757889,796 ops/s
Iteration   4: 23756953,690 ops/s
Iteration   5: 23740933,438 ops/s

# Run progress: 40,00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 22680692,531 ops/s
# Warmup Iteration   2: 22721879,037 ops/s
# Warmup Iteration   3: 23122212,987 ops/s
# Warmup Iteration   4: 23701745,309 ops/s
# Warmup Iteration   5: 23710457,108 ops/s
Iteration   1: 22306107,527 ops/s
Iteration   2: 23358715,061 ops/s
Iteration   3: 23697994,662 ops/s
Iteration   4: 23704095,421 ops/s
Iteration   5: 23642571,533 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 23054410,720 ops/s
# Warmup Iteration   2: 23519490,153 ops/s
# Warmup Iteration   3: 23092374,157 ops/s
# Warmup Iteration   4: 23182865,904 ops/s
# Warmup Iteration   5: 23427729,178 ops/s
Iteration   1: 23485233,362 ops/s
Iteration   2: 23573223,687 ops/s
Iteration   3: 23682134,616 ops/s
Iteration   4: 23743666,627 ops/s
Iteration   5: 23637352,471 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 23512295,701 ops/s
# Warmup Iteration   2: 23591567,104 ops/s
# Warmup Iteration   3: 22918060,312 ops/s
# Warmup Iteration   4: 23668500,549 ops/s
# Warmup Iteration   5: 23672662,468 ops/s
Iteration   1: 23652537,408 ops/s
Iteration   2: 23594881,475 ops/s
Iteration   3: 23541588,261 ops/s
Iteration   4: 23683486,987 ops/s
Iteration   5: 23506669,195 ops/s


Result "eu.happycoders.string2int.StringToIntMultiBenchmark.integerParsePositiveInt":
  23604657,447 ±(99.9%) 219449,478 ops/s [Average]
  (min, avg, max) = (22306107,527, 23604657,447, 23865525,921), stdev = 292958,775
  CI (99.9%): [23385207,969, 23824106,925] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
StringToIntMultiBenchmark.integerParsePositiveInt  thrpt   25  23604657,447 ± 219449,478  ops/s
