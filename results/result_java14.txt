# JMH version: 1.21
# VM version: JDK 14-ea, OpenJDK 64-Bit Server VM, 14-ea+19-824
# VM invoker: C:\Program Files\Java\jdk-14-ea+19\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: eu.happycoders.string2int.StringToIntMultiBenchmark.integerParsePositiveInt

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 23145920,285 ops/s
# Warmup Iteration   2: 23629996,308 ops/s
# Warmup Iteration   3: 22918261,308 ops/s
# Warmup Iteration   4: 22858599,358 ops/s
# Warmup Iteration   5: 23390775,001 ops/s
Iteration   1: 23370823,107 ops/s
Iteration   2: 23612045,883 ops/s
Iteration   3: 23753027,767 ops/s
Iteration   4: 23823614,202 ops/s
Iteration   5: 23761624,497 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 23384434,304 ops/s
# Warmup Iteration   2: 22764251,104 ops/s
# Warmup Iteration   3: 22383452,269 ops/s
# Warmup Iteration   4: 23442618,545 ops/s
# Warmup Iteration   5: 23595773,797 ops/s
Iteration   1: 23522891,587 ops/s
Iteration   2: 23590263,376 ops/s
Iteration   3: 23626597,121 ops/s
Iteration   4: 23567503,052 ops/s
Iteration   5: 23477614,181 ops/s

# Run progress: 40,00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 23447477,316 ops/s
# Warmup Iteration   2: 23786949,872 ops/s
# Warmup Iteration   3: 23666062,421 ops/s
# Warmup Iteration   4: 23184145,063 ops/s
# Warmup Iteration   5: 23411771,024 ops/s
Iteration   1: 23688972,661 ops/s
Iteration   2: 23804771,337 ops/s
Iteration   3: 23786224,526 ops/s
Iteration   4: 23863162,173 ops/s
Iteration   5: 23714557,873 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 22654774,827 ops/s
# Warmup Iteration   2: 22695902,035 ops/s
# Warmup Iteration   3: 22594849,811 ops/s
# Warmup Iteration   4: 23639016,133 ops/s
# Warmup Iteration   5: 23245056,016 ops/s
Iteration   1: 23619082,293 ops/s
Iteration   2: 23387767,352 ops/s
Iteration   3: 23631868,945 ops/s
Iteration   4: 23875688,620 ops/s
Iteration   5: 23761730,581 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 22164322,860 ops/s
# Warmup Iteration   2: 20652374,332 ops/s
# Warmup Iteration   3: 21079129,560 ops/s
# Warmup Iteration   4: 22591815,006 ops/s
# Warmup Iteration   5: 22526705,834 ops/s
Iteration   1: 23221407,785 ops/s
Iteration   2: 23008483,365 ops/s
Iteration   3: 23311645,832 ops/s
Iteration   4: 23682913,789 ops/s
Iteration   5: 23527156,442 ops/s


Result "eu.happycoders.string2int.StringToIntMultiBenchmark.integerParsePositiveInt":
  23599657,534 ±(99.9%) 158832,508 ops/s [Average]
  (min, avg, max) = (23008483,365, 23599657,534, 23875688,620), stdev = 212036,855
  CI (99.9%): [23440825,025, 23758490,042] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
StringToIntMultiBenchmark.integerParsePositiveInt  thrpt   25  23599657,534 ± 158832,508  ops/s
