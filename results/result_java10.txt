# JMH version: 1.21
# VM version: JDK 10.0.2, Java HotSpot(TM) 64-Bit Server VM, 10.0.2+13
# VM invoker: C:\Program Files\Java\jdk-10.0.2\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: eu.happycoders.string2int.StringToIntMultiBenchmark.integerParsePositiveInt

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 21874237,345 ops/s
# Warmup Iteration   2: 22265729,188 ops/s
# Warmup Iteration   3: 21892754,100 ops/s
# Warmup Iteration   4: 21199357,436 ops/s
# Warmup Iteration   5: 21548042,212 ops/s
Iteration   1: 22186513,331 ops/s
Iteration   2: 22106471,367 ops/s
Iteration   3: 22357662,385 ops/s
Iteration   4: 22329865,684 ops/s
Iteration   5: 22301660,598 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 22040801,361 ops/s
# Warmup Iteration   2: 22397616,293 ops/s
# Warmup Iteration   3: 22299612,607 ops/s
# Warmup Iteration   4: 22357571,813 ops/s
# Warmup Iteration   5: 22297369,809 ops/s
Iteration   1: 22249011,811 ops/s
Iteration   2: 22146655,105 ops/s
Iteration   3: 22218051,108 ops/s
Iteration   4: 22345545,177 ops/s
Iteration   5: 22282965,559 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 21852659,315 ops/s
# Warmup Iteration   2: 22026776,394 ops/s
# Warmup Iteration   3: 21652965,120 ops/s
# Warmup Iteration   4: 21576912,846 ops/s
# Warmup Iteration   5: 21215147,889 ops/s
Iteration   1: 20963164,420 ops/s
Iteration   2: 21403466,833 ops/s
Iteration   3: 21858666,905 ops/s
Iteration   4: 22229068,446 ops/s
Iteration   5: 22262826,754 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 21963200,122 ops/s
# Warmup Iteration   2: 22424680,669 ops/s
# Warmup Iteration   3: 21883253,589 ops/s
# Warmup Iteration   4: 21928708,732 ops/s
# Warmup Iteration   5: 21820970,775 ops/s
Iteration   1: 22227895,784 ops/s
Iteration   2: 22168517,649 ops/s
Iteration   3: 22333436,766 ops/s
Iteration   4: 22363644,073 ops/s
Iteration   5: 22359571,584 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 22046478,534 ops/s
# Warmup Iteration   2: 22179309,386 ops/s
# Warmup Iteration   3: 21804771,993 ops/s
# Warmup Iteration   4: 21907631,624 ops/s
# Warmup Iteration   5: 21539240,527 ops/s
Iteration   1: 21848414,675 ops/s
Iteration   2: 22080550,688 ops/s
Iteration   3: 22232830,923 ops/s
Iteration   4: 22153428,336 ops/s
Iteration   5: 22225748,634 ops/s


Result "eu.happycoders.string2int.StringToIntMultiBenchmark.integerParsePositiveInt":
  22129425,384 ±(99.9%) 240272,647 ops/s [Average]
  (min, avg, max) = (20963164,420, 22129425,384, 22363644,073), stdev = 320757,109
  CI (99.9%): [21889152,737, 22369698,031] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
StringToIntMultiBenchmark.integerParsePositiveInt  thrpt   25  22129425,384 ± 240272,647  ops/s
